/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface OnlyOwnersGuardInterface extends utils.Interface {
  functions: {
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "safe()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkAfterExecution"
      | "checkTransaction"
      | "safe"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OnlyOwnersGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OnlyOwnersGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    safe(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  checkAfterExecution(
    arg0: BytesLike,
    arg1: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  checkTransaction(
    arg0: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: string,
    arg8: string,
    arg9: BytesLike,
    msgSender: string,
    overrides?: CallOverrides
  ): Promise<void>;

  safe(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safe(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safe(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
