/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SafeToL2SetupInterface extends utils.Interface {
  functions: {
    "setupToL2(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "setupToL2"): FunctionFragment;

  encodeFunctionData(functionFragment: "setupToL2", values: [string]): string;

  decodeFunctionResult(functionFragment: "setupToL2", data: BytesLike): Result;

  events: {
    "ChangedMasterCopy(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedMasterCopy"): EventFragment;
}

export interface ChangedMasterCopyEventObject {
  singleton: string;
}
export type ChangedMasterCopyEvent = TypedEvent<
  [string],
  ChangedMasterCopyEventObject
>;

export type ChangedMasterCopyEventFilter =
  TypedEventFilter<ChangedMasterCopyEvent>;

export interface SafeToL2Setup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeToL2SetupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setupToL2(
      l2Singleton: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  setupToL2(
    l2Singleton: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    setupToL2(l2Singleton: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChangedMasterCopy(address)"(
      singleton?: null
    ): ChangedMasterCopyEventFilter;
    ChangedMasterCopy(singleton?: null): ChangedMasterCopyEventFilter;
  };

  estimateGas: {
    setupToL2(
      l2Singleton: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setupToL2(
      l2Singleton: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
