/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  SimulateTxAccessor,
  SimulateTxAccessorInterface,
} from "../../../contracts/accessors/SimulateTxAccessor";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "simulate",
    outputs: [
      {
        internalType: "uint256",
        name: "estimate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class SimulateTxAccessor__factory {
  static readonly abi = _abi;
  static createInterface(): SimulateTxAccessorInterface {
    return new utils.Interface(_abi) as SimulateTxAccessorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimulateTxAccessor {
    return new Contract(address, _abi, signerOrProvider) as SimulateTxAccessor;
  }
}
